import psycopg2
import csv

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
conn = psycopg2.connect(
    host="localhost",
    dbname="LAB11",
    user="postgres",
    password="20062008",
    port=5432
)

conn.autocommit = True
cur = conn.cursor()

# --- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã phonebook
cur.execute("""
CREATE TABLE IF NOT EXISTS phone (
    id SERIAL PRIMARY KEY,
    user_name VARCHAR(50) NOT NULL,
    user_phone VARCHAR(20) NOT NULL
);
""")

# --- –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä –∏ —Ñ—É–Ω–∫—Ü–∏–π
cur.execute("DROP FUNCTION IF EXISTS search_pattern(TEXT);")
cur.execute("DROP PROCEDURE IF EXISTS insert_or_update_user(TEXT, TEXT);")
cur.execute("DROP PROCEDURE IF EXISTS insert_many_users(TEXT[][]);")
cur.execute("DROP FUNCTION IF EXISTS get_users(INT, INT);")
cur.execute("DROP PROCEDURE IF EXISTS delete_user_by_value(TEXT);")

# --- 1. –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ —à–∞–±–ª–æ–Ω—É (username –∏–ª–∏ phone)
cur.execute("""
CREATE OR REPLACE FUNCTION search_pattern(pattern TEXT)
RETURNS TABLE(id INT, username TEXT, phone TEXT) AS $$
BEGIN
    RETURN QUERY 
    SELECT id, username, phone 
    FROM phone
    WHERE username ILIKE '%' || pattern || '%' 
       OR phone ILIKE '%' || pattern || '%';
END;
$$ LANGUAGE plpgsql;
""")

# --- 2. –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –≤—Å—Ç–∞–≤–∫–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–æ–º–µ—Ä, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
cur.execute("""
CREATE OR REPLACE PROCEDURE insert_or_update_user(username_param TEXT, phone_param TEXT)
LANGUAGE plpgsql AS $$
BEGIN
    IF EXISTS (SELECT 1 FROM phone WHERE user_name = username_param) THEN
        UPDATE phone SET user_phone = phone_param WHERE user_name = username_param;
    ELSE
        INSERT INTO phone(user_name, user_phone) VALUES(username_param, phone_param);
    END IF;
END;
$$;
""")

# --- 3. –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –≤—Å—Ç–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞
cur.execute("""
CREATE OR REPLACE PROCEDURE insert_many_users(users TEXT[][])
LANGUAGE plpgsql AS $$
DECLARE
    i INT;
BEGIN
    FOR i IN 1..array_length(users, 1) LOOP
        IF users[i][2] ~ '^\\d{11}$' THEN
            CALL insert_or_update_user(users[i][1], users[i][2]);
        ELSE
            RAISE NOTICE '‚ùå Invalid phone: %', users[i][2];
        END IF;
    END LOOP;
END;
$$;
""")

# --- 4. –§—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
cur.execute("""
CREATE OR REPLACE FUNCTION get_users(limit_num INT, offset_num INT)
RETURNS TABLE(id INT, username TEXT, phone TEXT) AS $$
BEGIN
    RETURN QUERY SELECT * FROM phone
    ORDER BY id
    LIMIT limit_num OFFSET offset_num;
END;
$$ LANGUAGE plpgsql;
""")

# --- 5. –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä—É
cur.execute("""
CREATE OR REPLACE PROCEDURE delete_user_by_value(val TEXT)
LANGUAGE plpgsql AS $$
BEGIN
    DELETE FROM phone WHERE username = val OR phone = val;
END;
$$;
""")

# --- –í—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä –∏–∑ Python ---

def call_search():
    val = input("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä–∞: ")
    cur.execute("SELECT * FROM search_pattern(%s)", (val,))
    for row in cur.fetchall():
        print(row)

def call_insert():
    name = input("–ò–º—è: ")
    phone = input("–ù–æ–º–µ—Ä: ")
    cur.execute("CALL insert_or_update_user(%s, %s)", (name, phone))

def call_many():
    n = int(input("–°–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–±–∞–≤–∏—Ç—å: "))
    users = []
    for _ in range(n):
        name = input("–ò–º—è: ")
        phone = input("–ù–æ–º–µ—Ä: ")
        users.append(["", name, phone])
    cur.execute("CALL insert_many_users(%s)", (users,))

def call_delete():
    val = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ –Ω–æ–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")
    cur.execute("CALL delete_user_by_value(%s)", (val,))
    print("üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ.")

def call_paginate():
    lim = int(input("–õ–∏–º–∏—Ç: "))
    off = int(input("–°–º–µ—â–µ–Ω–∏–µ (offset): "))
    cur.execute("SELECT * FROM get_users(%s, %s)", (lim, off))
    for row in cur.fetchall():
        print(row)

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
while True:
    print("\n–ú–µ–Ω—é:")
    print("1 - –î–æ–±–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print("2 - –î–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("3 - –ü–æ–∏—Å–∫ –ø–æ —à–∞–±–ª–æ–Ω—É")
    print("4 - –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä—É")
    print("5 - –ü–æ–∫–∞–∑–∞—Ç—å —Å –ª–∏–º–∏—Ç–æ–º –∏ —Å–º–µ—â–µ–Ω–∏–µ–º")
    print("0 - –í—ã—Ö–æ–¥")

    choice = input("–í—ã–±–µ—Ä–∏—Ç–µ: ")
    if choice == "1":
        call_insert()
    elif choice == "2":
        call_many()
    elif choice == "3":
        call_search()
    elif choice == "4":
        call_delete()
    elif choice == "5":
        call_paginate()
    elif choice == "0":
        break
    else:
        print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")

cur.close()
conn.close()